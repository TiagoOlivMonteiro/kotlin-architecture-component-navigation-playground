apply plugin: 'jacoco'

jacoco {
    toolVersion = "$versions.jacoco"
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

private static void addPathIfExists(List<String> paths,
                                    String directoryPath) {
    if (new File(directoryPath).exists())
        paths.add(directoryPath)
}

private static void addFileTreeIfExists(Project project, List<FileTree> fileTrees,
                                        String directoryPath, List<String> excludeFilter = []) {
    if (new File(directoryPath).exists())
        fileTrees.add(project.fileTree(dir: directoryPath, excludes: excludeFilter))
}

static List<String> findSourceDirectories(Project project, String flavor = "", String buildType = "debug") {

    final sourcePaths = []

    // Main
    addPathIfExists(sourcePaths, "${project.projectDir}/src/main/java")
    addPathIfExists(sourcePaths, "${project.projectDir}/src/main/kotlin")

    // Flavor
    if (!flavor.isEmpty()) {
        addPathIfExists(sourcePaths, "${project.projectDir}/src/$flavor/java")
        addPathIfExists(sourcePaths, "${project.projectDir}/src/$flavor/kotlin")
    }

    // BuildType
    if (!buildType.isEmpty()) {
        addPathIfExists(sourcePaths, "${project.projectDir}/src/$buildType/java")
        addPathIfExists(sourcePaths, "${project.projectDir}/src/$buildType/kotlin")
    }
    return sourcePaths
}

static List<ConfigurableFileTree> findClassDirectories(Project project, String flavor = "", String buildType = "debug") {

    final filter = [
        java  : ['**/R.class', '**/R$*.class',
                 '**/BuildConfig.*', '**/*$SavedState*',
                 '**/*Binding*.class', '**/databinding/**',
                 '**/generated/**', '**/BR*',
                 '**/DataBinder*', '**/*OnClickListener*'],
        kotlin: ['**/*JsonAdapter.*', '**/*$DefaultImpls.class',
                 '**/*inlined*', '**/*Directions*.class', '**/*OnClickListener*',
                 '**/test/*', '**/analytics/*']
    ]

    final classPaths = []

    // BuildType
    if (!buildType.isEmpty()) {
        addFileTreeIfExists(project, classPaths, "${project.buildDir}/intermediates/classes/$buildType", filter.java)
        addFileTreeIfExists(project, classPaths, "${project.buildDir}/intermediates/javac/$buildType/compile${buildType.capitalize()}JavaWithJavac", filter.java)
        addFileTreeIfExists(project, classPaths, "${project.buildDir}/tmp/kotlin-classes/$buildType", filter.kotlin)
    }

    // Flavor
    if (!flavor.isEmpty()) {
        addFileTreeIfExists(project, classPaths, "${project.buildDir}/intermediates/classes/$flavor/$buildType", filter.java)
        addFileTreeIfExists(project, classPaths, "${project.buildDir}/intermediates/javac/$flavor${buildType.capitalize()}/compile${flavor.capitalize()}${buildType.capitalize()}JavaWithJavac", filter.java)
        addFileTreeIfExists(project, classPaths, "${project.buildDir}/tmp/kotlin-classes/$flavor${buildType.capitalize()}", filter.kotlin)
    }

    return classPaths
}

static List<String> findCoverageFiles(String flavor = "", String buildType = "debug") {
    if (flavor.isEmpty()) {
        return [
            "jacoco/test${buildType.capitalize()}UnitTest.exec",
            "outputs/code_coverage/debugAndroidTest/connected/*.ec"
        ]
    } else {
        return [
            "jacoco/test${flavor.capitalize()}${buildType.capitalize()}UnitTest.exec",
            "outputs/code_coverage/${flavor}${buildType.capitalize()}AndroidTest/connected/**/*.ec"
        ]
    }
}

static List<Project> listAllChildProjectWithoutChilds(Project project) {

    final childProjects = []

    if (project.childProjects.isEmpty()) {
        childProjects.add(project)
    } else {
        project.childProjects.each {
            childPair ->
                childProjects.addAll(listAllChildProjectWithoutChilds(childPair.value))
        }
    }
    return childProjects
}

ext {

    findSourceDirectories = this.&findSourceDirectories
    findClassDirectories = this.&findClassDirectories
    findCoverageFiles = this.&findCoverageFiles
    listAllChildProjectWithoutChilds = this.&listAllChildProjectWithoutChilds

    minCoverage = 0.70
}
